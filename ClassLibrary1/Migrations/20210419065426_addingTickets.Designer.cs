// <auto-generated />
using System;
using Entity_DAL.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20210419065426_addingTickets")]
    partial class addingTickets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Entities.DefaultPermissions", b =>
                {
                    b.Property<int>("permissionId")
                        .HasColumnType("int");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.HasKey("permissionId", "roleId");

                    b.HasIndex("roleId");

                    b.ToTable("DefaultPermissions");
                });

            modelBuilder.Entity("Entities.Entities.Permission", b =>
                {
                    b.Property<int>("permissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("permissionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("permissionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("permissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Entities.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAdresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("roleId");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Entities.Entities.Role", b =>
                {
                    b.Property<int>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("roleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Entities.Entities.Ticket", b =>
                {
                    b.Property<int>("ticketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ticketDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ticketDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ticketPriority")
                        .HasColumnType("int");

                    b.Property<int>("ticketStatut")
                        .HasColumnType("int");

                    b.Property<string>("ticketTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ticketType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ticketId");

                    b.HasIndex("personId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Entities.Entities.UserPermission", b =>
                {
                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.Property<int>("permisionId")
                        .HasColumnType("int");

                    b.HasKey("personId", "permisionId");

                    b.HasIndex("permisionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Entities.Entities.Agent", b =>
                {
                    b.HasBaseType("Entities.Entities.Person");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Agent");
                });

            modelBuilder.Entity("Entities.Entities.Client", b =>
                {
                    b.HasBaseType("Entities.Entities.Person");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Entities.Entities.DefaultPermissions", b =>
                {
                    b.HasOne("Entities.Entities.Permission", "permission")
                        .WithMany("listDefaultPermissions")
                        .HasForeignKey("permissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.Role", "role")
                        .WithMany("listDefaultPermissions")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("Entities.Entities.Person", b =>
                {
                    b.HasOne("Entities.Entities.Role", "role")
                        .WithMany("listPerson")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("Entities.Entities.Ticket", b =>
                {
                    b.HasOne("Entities.Entities.Person", "c_person")
                        .WithMany("listTickets")
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("c_person");
                });

            modelBuilder.Entity("Entities.Entities.UserPermission", b =>
                {
                    b.HasOne("Entities.Entities.Permission", "permision")
                        .WithMany("listUserPermissions")
                        .HasForeignKey("permisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.Person", "person")
                        .WithMany("listUserPermissions")
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permision");

                    b.Navigation("person");
                });

            modelBuilder.Entity("Entities.Entities.Permission", b =>
                {
                    b.Navigation("listDefaultPermissions");

                    b.Navigation("listUserPermissions");
                });

            modelBuilder.Entity("Entities.Entities.Person", b =>
                {
                    b.Navigation("listTickets");

                    b.Navigation("listUserPermissions");
                });

            modelBuilder.Entity("Entities.Entities.Role", b =>
                {
                    b.Navigation("listDefaultPermissions");

                    b.Navigation("listPerson");
                });
#pragma warning restore 612, 618
        }
    }
}
